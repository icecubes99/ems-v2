// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum EmployeeType {
  REGULAR
  CONTRACTUAL
  PROBATIONARY
}

enum LeaveStatus {  //PENDING STATUS
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  VACATION
  SICK
  MATERNITY
  INCENTIVE
}

enum OvertimeType {
  REGULAR
  HOLIDAY
  MANDATORY
}

model User {
  id String @id @default(cuid())
  firstName               String?
  middleName              String?
  lastName                String?
  gender                  Gender?
  dateOfBirth             DateTime?
  jobTitle                String?
  email                   String?                @unique

  createdAt               DateTime?              @default(now())
  updatedAt               DateTime?              @updatedAt
  lastLogin               DateTime?              @default(now())

  emergencyContact        EmergencyContact?
  auditLogs               AuditLog[]  
  address                 AddressLine?
  documents               Documents[]
  timesheets              Timesheet[]
  leaves                  Leaves[]
  overtimes               Overtimes[]
  advancedTimesheets      AdvanceTimesheetUsers[]

  assignedDesignations    AssignDesignation?

  //Leave subsystem
  vacationDays            Int? @default(5)
  incentiveDays           Int? @default(5)

  // Optional if the User is a Department Head or a Designation Head
  department              Department?
  designation             Designation?

  // Payroll Subsystem
  deductions              Deductions[]
  additionalEarnings      AdditionalEarnings[]
  userSalary              UserSalary?
  governmentId            GovernmentId?
  payrollItems            PayrollItem[]
  salaryHistories         SalaryHistory[]
  allowances              Allowance[]
  daysNotWorked           DaysNotWorked[]
  // default
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?    
}


model Account {
  id String @id @default(cuid())
  userId            String   
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String 
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AddressLine {
  id String @id @default(cuid())
  street       String?
  barangay     String?
  city         String?
  province     String?
  country      String?
  zipCode      String?

  createdAt    DateTime? @default(now())  
  updatedAt    DateTime? @updatedAt
  
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model AuditLog {
  id String @id @default(cuid())
  userId String
  action String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model EmergencyContact {
  id String @id @default(cuid())
  firstName String
  middleName String 
  lastName String
  relationship String 
  contactNumber String 
  emailAddress String

  userId String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Documents {
  id String @id @default(cuid())
  documentName String
  documentType String
  documentLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Department {
  id String @id @default(cuid())
  departmentName String
  departmentDescription String
  status Status

  departmentHeadUserId String
  departmentHeadUser User @relation(fields: [departmentHeadUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  designations Designation[]

 salaryIncreaseEvents DepartmentSalaryIncrease[]

  @@unique([departmentHeadUserId])
}

model Designation {
  id String @id @default(cuid())
  designationName String
  designationDescription String
  status Status

  departmentId String
  department Department @relation(fields: [departmentId], references: [id])

  designationHeadUserId String
  designationHeadUser User @relation(fields: [designationHeadUserId], references: [id])

  designationSalary Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  AssignDesignation AssignDesignation[]

  salaryIncreaseEvents DesignationSalaryIncrease[]

  @@unique([designationHeadUserId])
}

model AssignDesignation {
  id String @id @default(cuid())
  employeeType EmployeeType
  status Status

  designationId String
  designation Designation @relation(fields: [designationId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}
model Timesheet {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dayId     String
  day       WorkingDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  clockIn   DateTime @default(now())
  clockOut  DateTime?

  isLate       Boolean    @default(false)
  isOvertime   Boolean    @default(false)
  forgotClockOut Boolean    @default(false)
  clockOutEarly Boolean    @default(false)
  isLeave       Boolean   @default(false)
  isAdvanced    Boolean   @default(false)

  clockOutEarlyMinutes Int        @default(0)
  minutesOvertime      Int        @default(0) 
  minutesLate  Int        @default(0)
  
  payrollItem     PayrollItem? @relation(fields: [payrollItemId], references: [id])
  payrollItemId   String?

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, dayId])
}

model WorkingDay {
  id        String     @id @default(cuid())
  date      DateTime
  password  String     // Password for attendance logging
  monthId   String
  month     WorkingMonth @relation(fields: [monthId], references: [id], onDelete: Cascade)
  timesheets Timesheet[]

  isRequired Boolean @default(true)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([date, monthId])
}

model WorkingMonth {
  id        String       @id @default(cuid())
  month     Int
  year      Int
  workingDays WorkingDay[]

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([month, year])
}

model Holiday {
  id        String   @id @default(cuid())
  date      DateTime
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date])
}

model Leaves {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime
  leaveStatus LeaveStatus @default(PENDING)
  reason    String
  leaveType LeaveType
  documentLink  String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, startDate, endDate])
  
}
enum OvertimeStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    REJECTED
}
model Overtimes {
    id        String   @id @default(cuid())
    reason    String
    status    OvertimeStatus @default(PENDING)
    overtimeType OvertimeType
  
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    timeOut   DateTime
    clockIn   DateTime?
    clockOut  DateTime?
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    @@unique([userId, createdAt])
}

// Payroll subsystem
model Deductions {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  deductionType String
  amount        Float
  description   String

  payrollItemId String?
  payrollItem   PayrollItem? @relation(fields: [payrollItemId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AdditionalEarnings {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  earningType String
  amount      Float
  description String

  payrollItemId String?
  payrollItem  PayrollItem? @relation(fields: [payrollItemId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSalary {
  id        String   @id @default(cuid())
  userId    String  @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  basicSalary Float

  grossSalary Float?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // @@unique([userId])
}


model SalaryHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  basicSalary    Float
  grossSalary    Float

  startDate DateTime
  endDate   DateTime @default(now())

  amountIncreased Float?
  
  salaryIncreaseEventId String?
  salaryIncreaseEvent SalaryIncreaseEvent? @relation(fields: [salaryIncreaseEventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GovernmentId {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  sssNumber         String?
  tinNumber         String?
  philHealthNumber  String?
  pagIbigNumber     String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId])
}

model Payroll {
  id        String   @id @default(cuid())
  payPeriodStart  DateTime
  payPeriodEnd    DateTime

  payrollStatus   LeaveStatus @default(PENDING)
  totalAmount     Float

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payrollItems    PayrollItem[]

  @@unique([payPeriodStart, payPeriodEnd])
}

model PayrollItem {
  id           String   @id @default(cuid())

  payrollId    String
  payroll      Payroll  @relation(fields: [payrollId], references: [id], onDelete: Cascade)

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  basicSalary  Float
  overtimeSalary Float @default(0)
  dailyRate    Float

  additionalEarnings Float @default(0)

  lateDeductions Float @default(0)
  earlyClockOutDeductions Float @default(0)

  totalDeductions Float @default(0)
  netSalary    Float

  daysWorked   Int
  daysNotWorked Int
  daysLeave    Int @default(0)

  minutesWorked Int
  minutesNotWorked Int
  minutesEarlyOut Int @default(0)
  minutesLate Int
  minutesOvertime Int

  specialDayMinutes  Int     @default(0)
  specialDayEarnings Float @default(0)

  // additional earnings and deductions
  additionalEarningsArray AdditionalEarnings[]
  deductions              Deductions[]
  daysNotWorkedArray      DaysNotWorked[]

  timesheets    Timesheet[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([payrollId, userId])
}

model DaysNotWorked {
  id        String   @id @default(cuid())
  date      DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payrollItemId String
  payrollItem PayrollItem @relation(fields: [payrollItemId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model SalaryIncreaseEvent {
  id            String   @id @default(cuid())
  percentage    Float?
  amount        Float?
  appliedAt     DateTime @default(now())
  appliedBy     String
  isUndone      Boolean  @default(false)
  undoneAt      DateTime?
  undoneBy      String?
  departments   DepartmentSalaryIncrease[]
  designations  DesignationSalaryIncrease[]

  salaryHistories SalaryHistory[]
}

model DepartmentSalaryIncrease {
  department          Department        @relation(fields: [departmentId], references: [id])
  departmentId        String
  salaryIncreaseEvent SalaryIncreaseEvent @relation(fields: [salaryIncreaseEventId], references: [id])
  salaryIncreaseEventId String

  @@id([departmentId, salaryIncreaseEventId])
}

model DesignationSalaryIncrease {
  designation         Designation       @relation(fields: [designationId], references: [id])
  designationId       String
  salaryIncreaseEvent SalaryIncreaseEvent @relation(fields: [salaryIncreaseEventId], references: [id])
  salaryIncreaseEventId String

  @@id([designationId, salaryIncreaseEventId])
}

model GovernmentContribution {
  id        String   @id @default(cuid())
  type      String   @unique
  brackets  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdvanceTimesheet {
  id        String @id @default(cuid())
  type      String
  startDate DateTime
  endDate   DateTime

  isUndone Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     AdvanceTimesheetUsers[]
}

model AdvanceTimesheetUsers {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  advanceTimesheet  AdvanceTimesheet @relation(fields: [advanceTimesheetId], references: [id], onDelete: Cascade)
  advanceTimesheetId  String

  @@id([userId, advanceTimesheetId])
}

model Allowance {
  id        String @id @default(cuid())
  type      String
  amount    Float
  startDate DateTime
  endDate   DateTime
  status    Status

  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArchiveType {
  USER
  DEPARTMENT
  DESIGNATION
  DOCUMENT
  PAYROLL_ITEM
  PAYROLL
  ALLOWANCE
}

model Archive {
  id            String      @id @default(cuid())
  archiveType   ArchiveType
  entityId      String
  entityData    Json
  createdAt     DateTime    @default(now())

  @@unique([archiveType, entityId])
}